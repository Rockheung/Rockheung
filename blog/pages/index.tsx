import React from "react";
import type {
  NextPage,
  GetStaticProps,
  GetStaticPropsResult,
  InferGetServerSidePropsType,
} from "next";
import {
  Client,
  APIErrorCode,
  isNotionClientError,
  ClientErrorCode,
} from "@notionhq/client";
import Head from "next/head";
import Link from "next/link";
import _ from "lodash";
import { NotionPage } from "../notion";

export const getStaticProps = async () => {
  const notion = new Client({
    auth: process.env.NOTION_TOKEN,
  });

  try {
    const { results: pages } = await notion.databases.query({
      database_id: process.env.NOTION_BLOG_DATABASE_ID || "",
      filter: {
        property: "published",
        checkbox: {
          equals: true,
        },
      },
    });

    const tags = [];

    return {
      props: {
        pages,
      },
    };
  } catch (error: unknown) {
    if (isNotionClientError(error)) {
      // error is now strongly typed to NotionClientError
      switch (error.code) {
        case ClientErrorCode.RequestTimeout:
          // ...
          break;
        case APIErrorCode.ObjectNotFound:
          // ...
          break;
        case APIErrorCode.Unauthorized:
          // ...
          break;
        // ...
        default:
          // you could even take advantage of exhaustiveness checking
          console.log(error.code);
      }
    }
  }
  return {
    props: {},
  };
};

const PageHome: NextPage<
  InferGetServerSidePropsType<typeof getStaticProps>
> = ({ pages }) => {
  const today = React.useMemo(() => {
    const _date = new Date();
    return "Published at " + _date.toLocaleDateString();
  }, []);
  return (
    <div>
      <Head>
        <title>/var/log/</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>
        <h1>{"/var/log"}</h1>
      </header>

      <main>
        <div>
          <ul>
            {typeof pages !== "undefined" &&
              (pages as NotionPage[])?.map(({ properties, id }) => {
                if (typeof properties === "undefined" || !properties.published)
                  return null;
                const { name, date, published, tags, tldr } = properties;
                if (!published.checkbox) return null;
                return (
                  <li key={id}>
                    <Link href={"/posts/" + id}>
                      <a>
                        <article id={id}>
                          <h3>{name.title[0].text.content}</h3>
                          <p>{date.date.start}</p>
                          <p>
                            {(tldr.rich_text as { text: { content: string } }[])
                              .map(({ text }) => text.content)
                              .join("")}
                          </p>
                        </article>
                      </a>
                    </Link>
                  </li>
                );
              })}
          </ul>
        </div>
      </main>

      <footer>
        <p>{today}</p>
      </footer>
    </div>
  );
};

export default PageHome;
