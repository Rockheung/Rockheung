import type { NextPage } from "next";
import {
  Client,
  APIErrorCode,
  isNotionClientError,
  ClientErrorCode,
} from "@notionhq/client";
import Head from "next/head";
import Link from "next/link";
import _ from "lodash";
import { NotionPage } from "../notion";

type PageHomeProps = {
  pages?: NotionPage[];
};

export async function getStaticProps() {
  const notion = new Client({
    auth: process.env.NOTION_TOKEN,
  });

  try {
    const { results: pages } = await notion.databases.query({
      database_id: process.env.NOTION_BLOG_DATABASE_ID || "",
    });

    const tags = [];

    return {
      props: {
        pages,
      },
    };
  } catch (error: unknown) {
    if (isNotionClientError(error)) {
      // error is now strongly typed to NotionClientError
      switch (error.code) {
        case ClientErrorCode.RequestTimeout:
          // ...
          break;
        case APIErrorCode.ObjectNotFound:
          // ...
          break;
        case APIErrorCode.Unauthorized:
          // ...
          break;
        // ...
        default:
          // you could even take advantage of exhaustiveness checking
          console.log(error.code);
      }
    }
  }

  return {
    props: {},
  };
}

const PageHome: NextPage<PageHomeProps> = ({ pages }) => {
  console.log("ðŸš€ ~ file: index.tsx ~ line 70 ~ pages", pages);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>
        <h1>{"/var/log"}</h1>
      </header>

      <main>
        {typeof pages !== "undefined" &&
          pages?.map(({ properties, id }) => {
            if (typeof properties === "undefined" || !properties.published)
              return null;
            const { name, date, published, tags, tldr } = properties;
            if (!published.checkbox) return null;
            return (
              <Link key={id} href={"/posts/" + id}>
                <a>
                  <div id={id}>
                    <h3>{name.title[0].text.content}</h3>
                    <p>{date.date.start}</p>
                    <p>
                      {tldr.rich_text.map(({ text }) => text.content).join("")}
                    </p>
                  </div>
                </a>
              </Link>
            );
          })}
      </main>

      <footer>
        <p>{"Updated at " + new Date().toLocaleString()}</p>
      </footer>
    </div>
  );
};

export default PageHome;
